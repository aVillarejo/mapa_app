{"version":3,"sources":["assets/background1.jpg","components/util/Modal.js","views/pages/Register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ModalComponent","state","isOpen","_this","props","title","body","toggle","setState","prevState","react_default","a","createElement","Modal","this","className","ModalHeader","ModalBody","ModalFooter","Button","color","onClick","Component","Register","alertVisible","handleAlert","Container","style","styles","root","Modal_ModalComponent","Alert","Row","Col","sm","size","order","offset","Card","CardHeader","CardTitle","CardText","Form","InputGroup","InputGroupAddon","addonType","Input","placeholder","block","backgroundImage","imgUrl","backgroundSize","overflow","App","react_router_dom","react_router","exact","path","name","component","from","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23050de6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background1.dbd3a31d.jpg\";","import React, { Component } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\n\nexport default class ModalComponent extends Component {\n  state = {\n    isOpen: this.props.isOpen ? this.props.isOpen : false,\n    title: this.props.title ? this.props.title : \"\",\n    body: this.props.body ? this.props.body : \"\"\n  };\n\n  toggle = () => {\n    this.setState(prevState => ({\n      isOpen: !prevState.isOpen\n    }));\n  };\n\n  render() {\n    return (\n      <Modal\n        isOpen={this.state.isOpen}\n        toggle={this.toggle}\n        className={this.props.className}\n      >\n        <ModalHeader toggle={this.toggle}>{this.state.title}</ModalHeader>\n        <ModalBody>{this.state.body}</ModalBody>\n        <ModalFooter>\n          <Button color=\"primary\" onClick={this.toggle}>\n            Aceptar\n          </Button>{\" \"}\n          {/* <Button color=\"secondary\" onClick={this.toggle}>\n            Cancel\n          </Button> */}\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Container,\n  Alert,\n  InputGroup,\n  InputGroupAddon,\n  Input,\n  Card,\n  Row,\n  Col,\n  CardText,\n  CardTitle,\n  Form,\n  CardHeader\n} from \"reactstrap\";\nimport imgUrl from \"../../assets/background1.jpg\";\n\nimport Modal from \"./../../components/util/Modal\";\n\nclass Register extends Component {\n  state = {\n    alertVisible: false\n  };\n\n  handleAlert = () => {\n    this.setState({\n      alertVisible: !this.state.alertVisible\n    });\n  };\n  render() {\n    return (\n      <Container style={styles.root}>\n        <Modal\n          isOpen={false}\n          title=\"Registro Exitoso\"\n          body=\"Su cuenta ha sido registrada, gracias por su tiempo\"\n        />\n        <h1>Pagina de Registo</h1>\n        <Button color=\"primary\">Button</Button>\n        <Button color=\"info\" onClick={this.handleAlert}>\n          Button\n        </Button>\n        <Alert\n          isOpen={this.state.alertVisible}\n          toggle={this.handleAlert}\n          color=\"primary\"\n        >\n          Esto es un Alert\n        </Alert>\n        <br />\n        <Row>\n          <Col sm={{ size: 6, order: 2, offset: 6 }}>\n            <Card body>\n              <CardHeader>Header</CardHeader>\n              <CardTitle>Special Title Treatment</CardTitle>\n              <CardText>\n                With supporting text below as a natural lead-in to additional\n                content.\n              </CardText>\n              <Form>\n                <InputGroup className=\"my-2\">\n                  <InputGroupAddon addonType=\"prepend\">N</InputGroupAddon>\n                  <Input placeholder=\"Nombre\" />\n                </InputGroup>\n                <InputGroup className=\"my-3\">\n                  <InputGroupAddon addonType=\"prepend\">A</InputGroupAddon>\n                  <Input placeholder=\"Apellidos\" />\n                </InputGroup>\n                <InputGroup className=\"my-3\">\n                  <InputGroupAddon addonType=\"prepend\">T</InputGroupAddon>\n                  <Input placeholder=\"Telefono\" />\n                </InputGroup>\n                <InputGroup className=\"my-3\">\n                  <InputGroupAddon addonType=\"prepend\">@</InputGroupAddon>\n                  <Input placeholder=\"correo\" />\n                </InputGroup>\n                <InputGroup className=\"my-3\">\n                  <InputGroupAddon addonType=\"prepend\">*</InputGroupAddon>\n                  <Input placeholder=\"Password\" />\n                </InputGroup>\n                <InputGroup className=\"my-3\">\n                  <InputGroupAddon addonType=\"prepend\">*</InputGroupAddon>\n                  <Input placeholder=\"Password\" />\n                </InputGroup>\n                <Button block color=\"success\">\n                  {\" \"}\n                  Registrarme!\n                </Button>\n              </Form>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nlet styles = {\n  root: {\n    backgroundImage: \"url(\" + imgUrl + \")\",\n    backgroundSize: \"cover\",\n    overflow: \"hidden\"\n  }\n};\nexport default Register;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Register from \"./views/pages/Register\";\n// import logo from './logo.svg';\n// import \"./App.css\";\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/registro\"\n            name=\"Register Page\"\n            component={Register}\n          />\n          <Redirect from=\"/\" to=\"/registro\" />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}